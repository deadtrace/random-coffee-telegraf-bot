import User from "../models/User.js";
import logError from "./logError.js";
import parseForMarkdown from "./parseForMarkdown.js";

const user_not_exist = "user_not_exist";

const showPartnerProfile = async (ctx, tid) => {
  try {
    const user = await User.findOne({ tid }).exec();
    if (!user) throw new Error(user_not_exist);

    let { name, workspace, hobbies, photo_id, username } = user;
    name = parseForMarkdown(name);
    const nameLink = `[${name}](tg://user?id=${tid})`;
    workspace = parseForMarkdown(workspace);
    if (username) username = parseForMarkdown(`@${username}`);
    hobbies = parseForMarkdown(hobbies);

    const text = `*–ü—Ä–æ—Ñ–∏–ª—å —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:*\n*–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:*\n${
      username ? name : nameLink
    } ${username ? username : ""}\n*–ö–æ–º–∞–Ω–¥–∞, —Ä–æ–ª—å, –∑–∞–¥–∞—á–∏ üë®üèª‚Äçüíª:*\n${workspace}\n${
      hobbies ? `*–•–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è üèÇüèª:*\n${hobbies}` : ""
    }`;

    if (photo_id) {
      await ctx.replyWithPhoto(photo_id, {
        caption: text,
        parse_mode: "MarkdownV2",
      });
    } else {
      await ctx.replyWithMarkdownV2(text);
    }
  } catch (error) {
    if (error.message === user_not_exist) {
      await ctx.reply("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–æ—Ç–∞.");
    } else {
      logError(error, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞.");
    }
  }
};

export default showPartnerProfile;
