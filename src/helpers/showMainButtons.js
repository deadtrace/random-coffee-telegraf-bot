import { Markup } from "telegraf";
import ACTIONS from "../actions/actionsList.js";
import User from "../models/User.js";
import logError from "./logError.js";

const showMainButtons = async (ctx, mainText) => {
  try {
    const { registered } = await User.findOne(
      { tid: ctx.chat.id },
      "registered"
    ).exec();

    const text = registered
      ? "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. –û–∂–∏–¥–∞–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."
      : "–°–µ–π—á–∞—Å —Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–≥–∏ –Ω–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É¬ª.";

    ctx.reply(mainText || text, {
      reply_markup: {
        inline_keyboard: [
          registered
            ? [
                Markup.button.callback(
                  "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚ùå",
                  ACTIONS.UNREGISTER_FROM_RANDOM_COFFEE
                ),
              ]
            : [
                Markup.button.callback(
                  "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ü§ùüèª",
                  ACTIONS.REGISTER_FOR_RANDOM_COFFEE
                ),
              ],
          [Markup.button.callback("–ü—Ä–æ—Ñ–∏–ª—å üë§", ACTIONS.VIEW_PROFILE)],
          [
            Markup.button.callback(
              "–î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ üé§",
              ACTIONS.GIVE_FEEDBACK
            ),
          ],
        ],
      },
    });
  } catch (error) {
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /menu"
    );
    logError(error, ctx);
  }
};

export default showMainButtons;
